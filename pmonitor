#!/bin/bash
pmonitor_file=/var/pmonitor/.pmonitor.me
pmonitor_pid_file=/var/pmonitor/.pmonitor.pid

#define fun
function is_process_exist(){
    pid=$1
    c_pid=`ps -ax | awk '{ print $1  }' | grep -e "^${pid}$"`
    if test -z "$c_pid";then
        return 0
    else
        return 1
    fi
}

function monitor(){
while true
do
    while read line
    do
        commend=""
        count=0
        for token in $line
        do
            if [ $count == 0 ];then
                pid=$token
                count=$count+1
                continue
            fi
            if [ $count == 1 ];then
                commend="$token"
                continue
            fi
            commend="$commend $token"
        done

        is_process_exist $pid
        if [ $? -eq 0 ];then
            eval "$commend"
            new_pid=$!
            sed -i "s/${pid}/${new_pid}/g" $pmonitor_file
        fi
    done < $pmonitor_file
    sleep 20
done
}

function runp(){

    run_commend=$1

    cat $pmonitor_file | grep "${run_commend}"
    exist=$?
    if [ $exist -eq 0 ];then
        line=`cat $pmonitor_file | grep "${run_commend}"`
        for token in $line
        do
            pid=$token
            break
        done

        is_process_exist $pid
        if [ $? -eq 1 ];then
            echo "error:this program exist!!!"
            echo "      only one process allow per program"
            exit
        fi
        sed -i "/{$pid}/d" $pmonitor_file
    fi

    echo "running $run_commend"
    eval $run_commend
    pid=$!
    echo "$pid $run_commend" >> $pmonitor_file
}

if [ $# -lt 1 ];then
    echo "Usage:"
    echo "       pmonitor monitor                 ---------- start monitor"
    echo "       pmonitor <program start commend> ---------- add program to monitor"
fi

if [ ! -d "/var/pmonitor" ];then
    mkdir /var/pmonitor
fi

if [ ! -f $pmonitor_pid_file ];then
    eval "nohup pmonitor monitor &"
    pid=$!
    echo "$pid" > $pmonitor_pid_file
    touch $pmonitor_file
else
    read monitor_pid < $pmonitor_pid_file
    is_process_exist $monitor_pid
    if [ $? -eq 0 ];then
        eval "nohup pmonitor monitor &"
        pid=$!
        echo "$pid" > $pmonitor_pid_file
        touch $pmonitor_file
    fi
fi

if [ "$1" == "monitor" ];then
    monitor
else
    run_commend="nohup"
    for param in $*
    do 
        run_commend="$run_commend $param"
    done
    run_commend="$run_commend &"
    runp "$run_commend"
fi
